package com.knetwork.forex.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ProAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProAllPropertiesEquals(Pro expected, Pro actual) {
        assertProAutoGeneratedPropertiesEquals(expected, actual);
        assertProAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProAllUpdatablePropertiesEquals(Pro expected, Pro actual) {
        assertProUpdatableFieldsEquals(expected, actual);
        assertProUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProAutoGeneratedPropertiesEquals(Pro expected, Pro actual) {
        assertThat(actual)
            .as("Verify Pro auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProUpdatableFieldsEquals(Pro expected, Pro actual) {
        assertThat(actual)
            .as("Verify Pro relevant properties")
            .satisfies(a -> assertThat(a.getText()).as("check text").isEqualTo(expected.getText()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProUpdatableRelationshipsEquals(Pro expected, Pro actual) {
        assertThat(actual)
            .as("Verify Pro relationships")
            .satisfies(a -> assertThat(a.getBroker()).as("check broker").isEqualTo(expected.getBroker()));
    }
}
