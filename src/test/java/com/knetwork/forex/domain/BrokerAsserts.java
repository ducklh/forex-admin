package com.knetwork.forex.domain;

import static com.knetwork.forex.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class BrokerAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBrokerAllPropertiesEquals(Broker expected, Broker actual) {
        assertBrokerAutoGeneratedPropertiesEquals(expected, actual);
        assertBrokerAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBrokerAllUpdatablePropertiesEquals(Broker expected, Broker actual) {
        assertBrokerUpdatableFieldsEquals(expected, actual);
        assertBrokerUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBrokerAutoGeneratedPropertiesEquals(Broker expected, Broker actual) {
        assertThat(actual)
            .as("Verify Broker auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBrokerUpdatableFieldsEquals(Broker expected, Broker actual) {
        assertThat(actual)
            .as("Verify Broker relevant properties")
            .satisfies(a -> assertThat(a.getName()).as("check name").isEqualTo(expected.getName()))
            .satisfies(a -> assertThat(a.getLogo()).as("check logo").isEqualTo(expected.getLogo()))
            .satisfies(a -> assertThat(a.getUrl()).as("check url").isEqualTo(expected.getUrl()))
            .satisfies(a -> assertThat(a.getDescription()).as("check description").isEqualTo(expected.getDescription()))
            .satisfies(a -> assertThat(a.getRating()).as("check rating").isEqualTo(expected.getRating()))
            .satisfies(a ->
                assertThat(a.getMinDeposit())
                    .as("check minDeposit")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getMinDeposit())
            )
            .satisfies(a -> assertThat(a.getSpreads()).as("check spreads").isEqualTo(expected.getSpreads()))
            .satisfies(a -> assertThat(a.getLeverage()).as("check leverage").isEqualTo(expected.getLeverage()))
            .satisfies(a -> assertThat(a.getFounded()).as("check founded").isEqualTo(expected.getFounded()))
            .satisfies(a -> assertThat(a.getHeadquarters()).as("check headquarters").isEqualTo(expected.getHeadquarters()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBrokerUpdatableRelationshipsEquals(Broker expected, Broker actual) {
        // empty method
    }
}
