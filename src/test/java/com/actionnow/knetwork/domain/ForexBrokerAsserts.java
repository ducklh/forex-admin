package com.actionnow.knetwork.domain;

import static com.actionnow.knetwork.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class ForexBrokerAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertForexBrokerAllPropertiesEquals(ForexBroker expected, ForexBroker actual) {
        assertForexBrokerAutoGeneratedPropertiesEquals(expected, actual);
        assertForexBrokerAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertForexBrokerAllUpdatablePropertiesEquals(ForexBroker expected, ForexBroker actual) {
        assertForexBrokerUpdatableFieldsEquals(expected, actual);
        assertForexBrokerUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertForexBrokerAutoGeneratedPropertiesEquals(ForexBroker expected, ForexBroker actual) {
        assertThat(actual)
            .as("Verify ForexBroker auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertForexBrokerUpdatableFieldsEquals(ForexBroker expected, ForexBroker actual) {
        assertThat(actual)
            .as("Verify ForexBroker relevant properties")
            .satisfies(a -> assertThat(a.getName()).as("check name").isEqualTo(expected.getName()))
            .satisfies(a -> assertThat(a.getNameEn()).as("check nameEn").isEqualTo(expected.getNameEn()))
            .satisfies(a -> assertThat(a.getLogo()).as("check logo").isEqualTo(expected.getLogo()))
            .satisfies(a -> assertThat(a.getUrl()).as("check url").isEqualTo(expected.getUrl()))
            .satisfies(a -> assertThat(a.getDescription()).as("check description").isEqualTo(expected.getDescription()))
            .satisfies(a -> assertThat(a.getDescriptionEn()).as("check descriptionEn").isEqualTo(expected.getDescriptionEn()))
            .satisfies(a ->
                assertThat(a.getRating()).as("check rating").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getRating())
            )
            .satisfies(a -> assertThat(a.getRegulation()).as("check regulation").isEqualTo(expected.getRegulation()))
            .satisfies(a -> assertThat(a.getMinDeposit()).as("check minDeposit").isEqualTo(expected.getMinDeposit()))
            .satisfies(a -> assertThat(a.getSpreads()).as("check spreads").isEqualTo(expected.getSpreads()))
            .satisfies(a -> assertThat(a.getLeverage()).as("check leverage").isEqualTo(expected.getLeverage()))
            .satisfies(a -> assertThat(a.getFounded()).as("check founded").isEqualTo(expected.getFounded()))
            .satisfies(a -> assertThat(a.getHeadquarters()).as("check headquarters").isEqualTo(expected.getHeadquarters()))
            .satisfies(a -> assertThat(a.getHeadquartersEn()).as("check headquartersEn").isEqualTo(expected.getHeadquartersEn()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertForexBrokerUpdatableRelationshipsEquals(ForexBroker expected, ForexBroker actual) {
        assertThat(actual)
            .as("Verify ForexBroker relationships")
            .satisfies(a -> assertThat(a.getForexFeatures()).as("check forexFeatures").isEqualTo(expected.getForexFeatures()))
            .satisfies(a -> assertThat(a.getForexPlatforms()).as("check forexPlatforms").isEqualTo(expected.getForexPlatforms()))
            .satisfies(a -> assertThat(a.getForexInstruments()).as("check forexInstruments").isEqualTo(expected.getForexInstruments()))
            .satisfies(a -> assertThat(a.getForexPros()).as("check forexPros").isEqualTo(expected.getForexPros()))
            .satisfies(a -> assertThat(a.getForexCons()).as("check forexCons").isEqualTo(expected.getForexCons()))
            .satisfies(a -> assertThat(a.getForexLanguages()).as("check forexLanguages").isEqualTo(expected.getForexLanguages()))
            .satisfies(a -> assertThat(a.getForexSupports()).as("check forexSupports").isEqualTo(expected.getForexSupports()))
            .satisfies(a ->
                assertThat(a.getForexPaymentMethods()).as("check forexPaymentMethods").isEqualTo(expected.getForexPaymentMethods())
            );
    }
}
