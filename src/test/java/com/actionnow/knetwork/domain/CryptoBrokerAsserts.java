package com.actionnow.knetwork.domain;

import static com.actionnow.knetwork.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class CryptoBrokerAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCryptoBrokerAllPropertiesEquals(CryptoBroker expected, CryptoBroker actual) {
        assertCryptoBrokerAutoGeneratedPropertiesEquals(expected, actual);
        assertCryptoBrokerAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCryptoBrokerAllUpdatablePropertiesEquals(CryptoBroker expected, CryptoBroker actual) {
        assertCryptoBrokerUpdatableFieldsEquals(expected, actual);
        assertCryptoBrokerUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCryptoBrokerAutoGeneratedPropertiesEquals(CryptoBroker expected, CryptoBroker actual) {
        assertThat(actual)
            .as("Verify CryptoBroker auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCryptoBrokerUpdatableFieldsEquals(CryptoBroker expected, CryptoBroker actual) {
        assertThat(actual)
            .as("Verify CryptoBroker relevant properties")
            .satisfies(a -> assertThat(a.getName()).as("check name").isEqualTo(expected.getName()))
            .satisfies(a -> assertThat(a.getNameEn()).as("check nameEn").isEqualTo(expected.getNameEn()))
            .satisfies(a -> assertThat(a.getLogo()).as("check logo").isEqualTo(expected.getLogo()))
            .satisfies(a -> assertThat(a.getUrl()).as("check url").isEqualTo(expected.getUrl()))
            .satisfies(a -> assertThat(a.getDescription()).as("check description").isEqualTo(expected.getDescription()))
            .satisfies(a -> assertThat(a.getDescriptionEn()).as("check descriptionEn").isEqualTo(expected.getDescriptionEn()))
            .satisfies(a ->
                assertThat(a.getRating()).as("check rating").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getRating())
            )
            .satisfies(a -> assertThat(a.getRegulation()).as("check regulation").isEqualTo(expected.getRegulation()))
            .satisfies(a -> assertThat(a.getMinDeposit()).as("check minDeposit").isEqualTo(expected.getMinDeposit()))
            .satisfies(a -> assertThat(a.getTradingFees()).as("check tradingFees").isEqualTo(expected.getTradingFees()))
            .satisfies(a -> assertThat(a.getFounded()).as("check founded").isEqualTo(expected.getFounded()))
            .satisfies(a -> assertThat(a.getHeadquarters()).as("check headquarters").isEqualTo(expected.getHeadquarters()))
            .satisfies(a -> assertThat(a.getHeadquartersEn()).as("check headquartersEn").isEqualTo(expected.getHeadquartersEn()))
            .satisfies(a -> assertThat(a.getTradingVolume()).as("check tradingVolume").isEqualTo(expected.getTradingVolume()))
            .satisfies(a -> assertThat(a.getMobileApp()).as("check mobileApp").isEqualTo(expected.getMobileApp()))
            .satisfies(a -> assertThat(a.getApiSupport()).as("check apiSupport").isEqualTo(expected.getApiSupport()))
            .satisfies(a ->
                assertThat(a.getDetailedDescription()).as("check detailedDescription").isEqualTo(expected.getDetailedDescription())
            )
            .satisfies(a ->
                assertThat(a.getDetailedDescriptionEn()).as("check detailedDescriptionEn").isEqualTo(expected.getDetailedDescriptionEn())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCryptoBrokerUpdatableRelationshipsEquals(CryptoBroker expected, CryptoBroker actual) {
        assertThat(actual)
            .as("Verify CryptoBroker relationships")
            .satisfies(a -> assertThat(a.getCryptoFeatures()).as("check cryptoFeatures").isEqualTo(expected.getCryptoFeatures()))
            .satisfies(a -> assertThat(a.getSupportedCoins()).as("check supportedCoins").isEqualTo(expected.getSupportedCoins()))
            .satisfies(a -> assertThat(a.getCryptoPros()).as("check cryptoPros").isEqualTo(expected.getCryptoPros()))
            .satisfies(a -> assertThat(a.getCryptoCons()).as("check cryptoCons").isEqualTo(expected.getCryptoCons()))
            .satisfies(a -> assertThat(a.getSecurityFeatures()).as("check securityFeatures").isEqualTo(expected.getSecurityFeatures()))
            .satisfies(a -> assertThat(a.getPaymentMethods()).as("check paymentMethods").isEqualTo(expected.getPaymentMethods()))
            .satisfies(a -> assertThat(a.getCustomerSupports()).as("check customerSupports").isEqualTo(expected.getCustomerSupports()));
    }
}
